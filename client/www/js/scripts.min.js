
(function() {
  'use strict'

  var dependencies = [
    'ui.router',
    'googlechart',
    'ngAnimate',
    'ngMessages',
    'angularMoment'
  ]

  angular.module('panic', dependencies)
  .constant({'API_URL': resolveApiUrl() + '/api/v1'})
   .run(routeEvent)

   resolveApiUrl.$inject = ['$http']

   function resolveApiUrl($http){
     if(window.location.origin === "http://localhost:5000") return 'http://localhost:3000';
     return 'https://panic-button-g20.herokuapp.com'
   }

   routeEvent.$inject = ['$rootScope', '$state', '$window'];

   function routeEvent($rootScope, $state, $window){
     $rootScope.$on('$stateChangeStart', function(event, state){
       if(!$window.localStorage.getItem('token') && state.loggedInOnly){
         event.preventDefault();
         $state.go('landing');
       }
       if($window.localStorage.getItem('token') && state.loggedOutOnly){
         event.preventDefault();
         $state.go('dashboard');
       }
     })
   }
})();

(function() {
  'use strict';

  angular.module('panic')
  .factory('authService', authFactory);

 authFactory.$inject = [
    '$log',
     '$http',
     '$state',
     '$window',
     'API_URL'
  ];

  function authFactory ($log, $http, $state, $window, API_URL) {
    var AUTH_ENDPOINTS = $http.get(API_URL).then(function (res){
      return $http.get(res.data.auth)
    })

    var authFactory = {
      session: {currentUser: null},
      login: login,
      signup: signup,
      me: me
    }

    return authFactory

    function login (user) {
      return AUTH_ENDPOINTS.then(function(AUTH_ENDPOINTS){
        AUTH_ENDPOINTS = AUTH_ENDPOINTS.data;
        return $http.post(AUTH_ENDPOINTS.login, user).then(function (res){
          $window.localStorage.setItem('token', res.data.token)
          return res.data
        })
      })
    }

    function signup (user) {
      return AUTH_ENDPOINTS.then(function(AUTH_ENDPOINTS){
        AUTH_ENDPOINTS = AUTH_ENDPOINTS.data;
        return $http.post(AUTH_ENDPOINTS.signup, user).then(function (res){
          $window.localStorage.setItem('token', res.data.token)
          return res.data
        })
      })
    }

    function me(){
      return AUTH_ENDPOINTS.then(function(AUTH_ENDPOINTS){
        AUTH_ENDPOINTS = AUTH_ENDPOINTS.data;
        return $http.get(AUTH_ENDPOINTS.me).then(function(res){
          authFactory.session.currentUser = Object.keys(res.data).length > 0 ? res.data : null;
          return Promise.resolve(authFactory.session);
        }).catch(function (err){
          return Promise.reject(err);
        });
      });
    }
  }
}());

(function() {
  'use strict';

  angular.module('panic')
  .factory('dashboardService', dashboardFactory);

 dashboardFactory.$inject = [
    '$log',
     '$http',
     '$state',
     '$window',
     'API_URL'
  ];

  function dashboardFactory ($log, $http, $state, $window, API_URL) {
    var getParticipants = function () {
      return $http.get(API_URL).then(function (res){
        return $http.get(res.data.participations)
      })
    }

    var POST_CLASSES_ENDPOINTS = $http.get(API_URL).then(function (res){
      return res.data.classes.post
    })

    var _classes = {};
    _classes._teaching = [];
    _classes._attending = [];

    var _previousPage;
    var _currentLecture;


    var dashboardFactory = {
      getClasses: getClasses,
      getClassInfo: getClassInfo,
      addClass: addClass,
      addLecture: addLecture,
      setPreviousPage: setPreviousPage,
      getPreviousPage: getPreviousPage,
      startLecture: startLecture,
      endLecture: endLecture,
      setCurrentLecture: setCurrentLecture,
      getCurrentLecture: getCurrentLecture,
      addParticipant: addParticipant,
      deleteParticipant: deleteParticipant
    }

    return dashboardFactory

    function getClasses(){
      return getParticipants().then(function(res){
        _classes._teaching = [];
        _classes._attending = [];
        for (var i = 0; i < res.data.length; i++) {
          if(res.data[i].attributes.instructor){
            _classes._teaching.push(res.data[i]);
          } else {
            _classes._attending.push(res.data[i]);
          }
        }
        return _classes;
        }).catch(function (err){
          return err;
        })
    }

    function getClassInfo (url) {
      return $http.get(url).then(function (res) {
        return res.data
      })
    }

    function addClass(newClass) {
      return POST_CLASSES_ENDPOINTS.then(function (res){
        return $http.post(res, newClass)
        .then(function(res){
          _classes._teaching.push(res.data)
          return _classes
        })
      })
    }

    function addLecture (newLecture, url) {
      return $http.post(url, newLecture)
      .then(function (res) {
        return res.data;
      })
    }

    function setPreviousPage (id) {
      _previousPage = id;
      return
    }

    function getPreviousPage () {
      return _previousPage
    }

    function startLecture (url) {
      return $http.post(url).then(function (res) {
        return res
      })
    }

    function endLecture (url) {
      return $http.post(url).then(function (res){
        return res
      })
    }

    function setCurrentLecture(lecture){
      _currentLecture = lecture;
      return
    }

    function getCurrentLecture(){
      return _currentLecture;
    }

    function addParticipant(url, newParticipant){
      return $http.post(url, newParticipant).then(function(res){
        return res
      })
    }

    function deleteParticipant (url){
      return $http.delete(url).then(function(res){
        return res
      })
    }

  }
}());

(function() {
  'use strict'

  angular.module('panic')
  .config(setupRoutes)

  setupRoutes.$inject = [
    '$stateProvider',
    '$urlRouterProvider',
    '$locationProvider',
    '$httpProvider',
  ];

  function setupRoutes($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
    $httpProvider.interceptors.push("AuthInterceptorService");
    $locationProvider.html5Mode(true);
    $urlRouterProvider.otherwise("/");

    $stateProvider
      .state('landing', {
        url: '/',
        template: "<landing-directive></landing-directive>",
        loggedOutOnly: true
      })
      .state('student', {
        url: '/lecture/:id',
        template: "<lecture-student></lecture-student>",
        resolve: {
          user: getMe
        }
      })
      .state('teacher', {
        url: '/teacher/:id',
        template: "<lecture-teacher></lecture-teacher>",
        // loggedInOnly: true
      })
      .state('dashboard', {
        url: '/dashboard',
        template: "<dashboard></dashboard>",
        loggedInOnly: true,
        resolve: {
          user: getMe
        }
      })
      .state('classInfo', {
        url: '/:classId',
        templateUrl: "partials/dashboard.info.html",
        loggedInOnly: true,
        parent: 'dashboard',
        resolve: {
          user: getMe
        }
      })
  }

  getMe.$inject = ['authService'];
  function getMe(authService) {
    return authService.me();
  }

})();

(function() {
  'use strict';

    angular.module('panic')
      .directive('landingDirective', landingDirective);

      function landingDirective (){
        return {
          restrict: "E",
          scope: {},
          templateUrl: "partials/landing.html",
          controller: landingController,
          controllerAs: "vm"
        }
      }

      landingController.$inject = [
        '$scope',
        '$log',
        '$state',
        'authService'
      ];

      function landingController($scope, $log, $state, authService) {
        var vm = this;
        vm.classCodeSubmit = classCodeSubmit;
        vm.loginSubmit = loginSubmit;
        vm.signupSubmit = signupSubmit;

        function classCodeSubmit () {
          console.log('class code', vm.classCode);
          vm.frm = {}
          $state.go('student');
        }

        function loginSubmit () {
          var user = angular.copy(vm.login)
          authService.login(user).then(function (res){
            $state.go('dashboard');
          })
        }

        function signupSubmit (){
          var user = angular.copy(vm.signup);
          authService.signup(user).then(function (res){
            $state.go('dashboard');
          })
        }

      }

}());

(function() {
  'use strict';

    angular.module('panic')
      .directive('dashboard', dashboardDirective);

      function dashboardDirective (){
        return {
          restrict: "E",
          scope: {},
          templateUrl: "partials/dashboard.html",
          controller: dashboardController,
          controllerAs: "vm"
        }
      }

      dashboardController.$inject = [
        '$log',
        '$state',
        'dashboardService',
        'authService',
        '$window'
      ];

      function dashboardController($log, $state, dashboardService, authService, $window) {
        var vm = this;
        vm.info = {};
        vm.session = authService.session;
        vm.getInfo = getInfo;
        vm.addClass = addClass;
        vm.formClose = formClose;
        vm.addLecture = addLecture;
        vm.currentClass;
        vm.logout = logout;
        vm.setPreviousPage = setPreviousPage;
        vm.startLecture = startLecture;
        vm.addParticipant = addParticipant;
        vm.deleteParticipant = deleteParticipant;

        dashboardService.getClasses()
        .then(function (res){
          vm.teaching = res._teaching;
          vm.attending = res._attending;
          if(res._teaching.length > 0){
            for (var i = 0; i < res._teaching.length; i++) {
              if(+res._teaching[i].attributes.id === +$state.params.classId) {
                vm.currentClass = res._teaching[i];
                return getInfo(res._teaching[i]);
              }
            }
          }
          if(res._teaching.length > 0){
            for (var i = 0; i < res._attending.length; i++) {
              if(+res._attending[i].attributes.id === +$state.params.classId) {
                vm.currentClass = res._attending[i];
                return getInfo(res._attending[i]);
              }
            }
          }
        })

        function getInfo (currentClass){
          vm.currentClass = currentClass;
          return dashboardService.getClassInfo(currentClass.links.summary)
          .then(function(res) {
            vm.links = res.links;
            vm.info = res.attributes;
            return
          })
        }

        function addClass (myForm){
          var newClass = angular.copy(vm.class)
          myForm.$setPristine();
          myForm.$setUntouched();
          vm.class = {};
          return dashboardService.addClass(newClass)
          .then(function(res){
            return res
          });
        }

        function setPreviousPage(id){
          dashboardService.setPreviousPage(id);
          return
        }

        function addLecture (form) {
          var newLecture = angular.copy(vm.lecture);
          form.$setPristine();
          form.$setUntouched();
          vm.lecture = {};
          return dashboardService.addLecture(newLecture, vm.links.lectures.post)
          .then(function(res){
            vm.info.lectures.push(res);
            return
          });
        }

        function formClose (form) {
          form.$setPristine();
          form.$setUntouched();
          vm.class = {};
          vm.lecture = {};
          vm.student = {};
          return
        }

        function logout () {
          $window.localStorage.clear();
          $state.go('landing');
          return
        }

        function startLecture(lecture){
          dashboardService.startLecture(lecture.links.start);
          dashboardService.setCurrentLecture(lecture);
          $state.go('teacher', {id: lecture.attributes.lecture_id});
        }

        function addParticipant(form){
          var newParticipant = angular.copy(vm.student);
          dashboardService.addParticipant(vm.links.participants.post, newParticipant).then(function(res){
            vm.info.participants.push(res.data);
            vm.student = {};
            form.$setPristine();
            form.$setUntouched();
          });
        }

        function deleteParticipant (participant){
            dashboardService.deleteParticipant(participant.links.delete)
            .then(function (res){
              for (var i = 0; i < vm.info.participants.length; i++) {
                if(vm.info.participants[i].attributes.user_id == res.data[0].user_id){
                   vm.info.participants.splice(i, 1);
                }
              }
              return vm.info
            })

        }

      }
}());

(function() {
  'use strict';
    angular.module('panic')
      .directive('lectureStudent', lectureDirective);

      function lectureDirective (){
        return {
          restrict: "E",
          scope: {},
          templateUrl: "partials/lecture.student.html",
          controller: lectureController,
          controllerAs: "vm"
        }
      }

      lectureController.$inject = [
        '$log',
        '$state',
        'authService',
        'dashboardService'
      ];

      function lectureController($log, $state, authService, dashboardService) {
        var socket = io.connect('http://localhost:3000/');
        var vm = this;
        var lecture_id = $state.params.id
        var lastStatus = 2;
        vm.session = authService.session;
        this.vote = vote;
        vm.previousPage = dashboardService.getPreviousPage();

        socket.emit('set', {lecture_id: +lecture_id, user_id: 1, status_id: lastStatus})

        function vote (status_id) {
          socket.emit('chart', {lecture_id: lecture_id, user_id: 1, status: status_id, lastStatus: lastStatus} )
          lastStatus= status_id
        }

      }

}());

(function() {
  'use strict';

    angular.module('panic')
      .directive('lectureTeacher', lectureTeacherDirective);

      function lectureTeacherDirective () {
        return {
          restrict: "E",
          scope: {},
          templateUrl: "partials/lecture.teacher.html",
          controller: lectureTeacherController,
          controllerAs: "vm"
        }
      }

      lectureTeacherController.$inject = [
        '$log',
        '$state',
        'dashboardService'
      ];

      function lectureTeacherController($log, $state, dashboardService) {
        var vm = this;
        vm.endLecture = endLecture;
        vm.currentLecture = dashboardService.getCurrentLecture();

        function endLecture () {
          dashboardService.endLecture(vm.currentLecture.links.stop);
          $state.go('dashboard');
        }

      }

}());

(function() {
  'use strict';

  angular.module('panic')
  .factory('AuthInterceptorService', factory)

    factory.$inject = ['$window', '$injector'];

    function factory($window, $injector) {
    return {
     'request': function(req) {
      //  console.log('sending token');
        var token = localStorage.getItem('token');
        if (token) req.headers.authentication = token;
        return req;
      },

      'responseError': function(response) {
        // console.log(response);
        if(response.status === 401) {
          $window.localStorage.clear();
          $injector.get('$state').go('landing');
        }
        return response;
        }
      };
    }

}());

(function() {
  'use strict';

  angular.module('panic')
  .directive('areaChart', directive)

  function directive () {
    return {
      scope: {},
      template: '<div google-chart chart="areaChart"></div>',
      controller: controller,
    }

    function controller ($scope, $rootScope, ChartFactory) {
      var i = 0;
      var lecture_id = ChartFactory.lecture_id
      $scope.className = 'class'

      $rootScope.$on(lecture_id, function (event, data) {
          // var students = Object.keys(data).length
        var students = data.students
        var timeStart = new Date(data.lecture_start).getTime();
        var timeArray =[]
        var timeData = {};

        for (var user in students ) {
          for (var i = 0; i < students[user].length; i++) {
            var dif = (Math.floor((+timeStart - +new Date(students[user][i].created_at).getTime())/6))
            timeData[dif] = students[user][i].status_id
          }
          timeArray.push(timeData)
        }
        console.log(timeArray);
        // for (var time in timeData) {
        //   areaChart.data.rows.push({c: [{v: time }, {v: d}, {v: u}, {v: g}] })
        //
        // }
        areaChart.data.rows.push({c: [{v: time }, {v: timeData[time].d}, {v: timeData[time].u}, {v: timeData[time].g}] })
      })

      var areaChart = {};
      areaChart.type = "AreaChart";
      areaChart.displayed = false;
      areaChart.data = {};
      areaChart.data.rows = []

      areaChart.data.rows.push({c: [{v: "Lecture start"},{v: 0},{v: 100},{v: 0} ] })

      areaChart.data.cols = [
          {id: "month",label: "Month",type: "string"},
          {id: "DaFuq",label: "I don't get it",type: "number"},
          {id: "NoVote",label: "Undecided",type: "number"},
          {id: "GotIt",label: "I got it",type: "number"},
        ];
      areaChart.options = {
        "title": $scope.className,
        "isStacked": "true",
        "fill": 20,
        "displayExactValues": true,
        "vAxis": {
          "title": "Percent class",
          "gridlines": {
            "count": 5
          }
        },
        "hAxis": {
          "title": "Time",
          "scaleType": 'log'

        }
      };
      $scope.areaChart = areaChart;

    }
  }


}());

(function() {
  'use strict';

  angular.module('panic')
  .factory('ChartFactory', factory)

  // factory.$inject = [ '$rootScope', '$location']

  function factory ($rootScope, $location, $state, $http, API_URL) {
    $rootScope.$on( "$stateChangeSuccess", function(event, next, current) {
      ///Nick- do you mean $state.params ... ?
      // console.log('chart.factory', $route.current.params);
    })

    var service = {
      lecture_id: $state.params.id,
      graphData: graphData,
    }
    return service

    function graphData () {
      return $http.get(API_URL + '/lectures/'+service.lecture_id+'/understandings')
      .then( function (res) {
        return res.data
      })
    }
  }


}());

(function() {
  'use strict';

  angular.module('panic')
  .directive('pieChart', directive)

  function directive () {
    return {
      scope: {},
      template: '<div google-chart chart="pieChart" id="pieChart"></div>',
      controller: controller,
    }
    function controller ($scope, $rootScope, $state, ChartFactory) {
      var socket = io.connect('http://Nick-MacBook-Air.local:3000');
      var pieChart = {};
      var lecture_id = $state.params.id;
      var students = 0;
      ChartFactory.graphData();


      socket.on(lecture_id, function (data) {
        if (data.class) {

          console.log(data);
        } else {
          switch (data.lastStatus) {
            case 1:
                var g = 0
              break
            case 2:
                var u = 0
              break
            case 3:
                var d = 0
              break
          }
          switch (data.status_id) {
            case 1:
                var g = 1
              break
            case 3:
                var d = 1
              break
          }
          $rootScope.$emit(lecture_id, data)
          $scope.vote[0]= { 'c': [ { 'v': 'I dont get it' }, {'v' : d} ] }
          $scope.vote[1] = { 'c': [ { 'v': 'undecided'}, {'v' : u} ] }
          $scope.vote[2] = { 'c': [ { 'v':  'I get it'}, {'v' : g } ] }
          $scope.$apply()
        }
      })

      ChartFactory.graphData().then( function(data) {
        var dat = data.students
        if (!(dat === null)) {
          var g = 0 ;
          var u = 0 ;
          var d = 0 ;
          for (var user in dat ) {
            switch (dat[user][dat[user].length - 1].status_id) {
              case 1:
                d++
                break;
              case 2:
                u++
                break;
              case 3:
                g++;
                break;
            }
          }
            $scope.vote[0]= { 'c': [ { 'v': 'I dont get it' }, {'v' : d} ] }
            $scope.vote[1] = { 'c': [ { 'v': 'undecided'}, {'v' : u} ] }
            $scope.vote[2] = { 'c': [ { 'v':  'I get it'}, {'v' : g } ] }
          $rootScope.$emit(lecture_id, data)
        }
      })

      $scope.$on('$destroy', function (event) {
        socket.removeAllListeners();
      });

      pieChart.type = 'PieChart';
      pieChart.displayed = false;
      pieChart.data = {}
      $scope.vote = [];
      $scope.vote[0]= { 'c': [ { 'v': 'dafuq' }, {'v' : 0} ] }
      $scope.vote[1] = { 'c': [ { 'v': 'novote'}, {'v' : 100} ] }
      $scope.vote[2] = { 'c': [ { 'v':  'gotit'}, {'v' : 0 } ] }
      pieChart.data.rows = $scope.vote

      pieChart.data.cols = [
        { "id": "month", "label": "Month", "type": "string" },
        { "id": "laptop-id", "label": "Laptop", "type": "number" },
        { "id": "desktop-id", "label": "Desktop", "type": "number" },
        { "id": "server-id", "label": "Server", "type": "number" },
        { "id": "cost-id", "label": "Shipping", "type": "number" }
      ];

        pieChart.formatters = {}
        pieChart.options = {
          "isStacked": "true",
          "fill": 20,
          "displayExactValues": true,
          },



        $scope.pieChart = pieChart;
    }
  }


}());
