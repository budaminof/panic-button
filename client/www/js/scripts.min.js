
(function() {
  'use strict'

  var dependencies = [
    'ui.router',
    'googlechart'
  ]

  angular.module('panic', dependencies)
  .constant({'API_URL': resolveApiUrl() + '/api/v1'})
   .run(routeEvent)

   resolveApiUrl.$inject = ['$http']

   function resolveApiUrl($http){
     if(window.location.origin === "http://localhost:5000") return 'http://localhost:3000';
     return 'https://panic-button-g20.herokuapp.com'
   }

   routeEvent.$inject = ['$rootScope', '$state', '$window'];

   function routeEvent($rootScope, $state, $window){
     $rootScope.$on('$stateChangeStart', function(event, state){
       if(!$window.localStorage.getItem('token') && state.loggedInOnly){
         event.preventDefault();
         $state.go('landing');
       }
       if($window.localStorage.getItem('token') && state.loggedOutOnly){
         event.preventDefault();
         $state.go('dashboard');
       }
     })
   }
})();

(function() {
  'use strict';

  angular.module('panic')
  .factory('authService', authFactory);

 authFactory.$inject = [
    '$log',
     '$http',
     '$state',
     '$window',
     'API_URL'
  ];

  function authFactory ($log, $http, $state, $window, API_URL) {
    var AUTH_ENDPOINTS;
    $http.get(API_URL).then(function (res){
      return $http.get(res.data.auth)
    }).then(function (res){
      AUTH_ENDPOINTS = res.data;
    })

    var authFactory = {
      session: {currentUser: null},
      login: login,
      signup: signup,
      me: me
    }

    return authFactory

    function login (user) {
      return $http.post(AUTH_ENDPOINTS.login, user).then(function (res){
        $window.localStorage.setItem('token', res.data.token)
        return res.data
      })
    }

    function signup (user) {
      return $http.post(AUTH_ENDPOINTS.signup, user).then(function (res){
        $window.localStorage.setItem('token', res.data.token)
        return res.data
      })
    }

    function me(){
      console.log('in service me', AUTH_ENDPOINTS.me);
      return $http.get(AUTH_ENDPOINTS.me).then(function(res){
        console.log('me', res);
        authFactory.session.currentUser = Object.keys(res.data).length > 0 ? res.data : null;
        console.log('AuthFactory me()' + authFactory.session);
        return authFactory.session;
      }).catch(function (err){
        console.log(err);
        return Promise.reject(err);
      })
    }
  }
}());

(function() {
  'use strict'

  angular.module('panic')
  .config(setupRoutes)

  setupRoutes.$inject = [
    '$stateProvider',
    '$urlRouterProvider',
    '$locationProvider',
    '$httpProvider',
  ];

  console.log('routes');

  function setupRoutes($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
    $httpProvider.interceptors.push("AuthInterceptorService");
    $locationProvider.html5Mode(true);
    $urlRouterProvider.otherwise("/");
    $stateProvider
      .state('landing', {
        url: '/',
        template: "<landing-directive></landing-directive>",
        loggedOutOnly: true
      })
      .state('student', {
        url: '/lecture',
        template: "<lecture-student></lecture-student>"
      })
      .state('teacher', {
        url: '/teacher',
        template: "<lecture-teacher></lecture-teacher>",
        // loggedInOnly: true
      })
      .state('dashboard', {
        url: '/dashboard',
        template: "<dashboard></dashboard>",
        loggedInOnly: true,
        // resolve: {
        //   user: getMe
        // }
      })
      .state('dashboard.classes', {
        url: '/classes',
        templateUrl: "partials/dashboard.classes.html",
        loggedInOnly: true,
      })
      .state('dashboard.lectures', {
        url: '/lectures',
        templateUrl: "partials/dashboard.lectures.html",
        loggedInOnly: true
      })

  }


  // getMe.$inject = ['authService'];
  // function getMe(authService) {
  //   console.log('in get me fn');
  //   return authService.me();
  // }

})();

(function() {
  'use strict';

    angular.module('panic')
      .directive('landingDirective', landingDirective);

      function landingDirective (){
        return {
          restrict: "E",
          scope: {},
          templateUrl: "partials/landing.html",
          controller: landingController,
          controllerAs: "vm"
        }
      }

      landingController.$inject = [
        '$scope',
        '$log',
        '$state',
        'authService'
      ];

      function landingController($scope, $log, $state, authService) {
        var vm = this;
        vm.classCodeSubmit = classCodeSubmit;
        vm.loginSubmit = loginSubmit;
        vm.signupSubmit = signupSubmit;

        function classCodeSubmit () {
          console.log('class code', vm.classCode);
          vm.frm = {}
          $state.go('student');
        }

        function loginSubmit () {
          var user = angular.copy(vm.login)
          authService.login(user).then(function (res){
            $state.go('dashboard');
          })
        }

        function signupSubmit (){
          var user = angular.copy(vm.signup);
          authService.signup(user).then(function (res){
            $state.go('dashboard');
          })
        }

      }

}());

(function() {
  'use strict';

    angular.module('panic')
      .directive('dashboard', dashboardDirective);

      function dashboardDirective (){
        return {
          restrict: "E",
          scope: {},
          templateUrl: "partials/dashboard.html",
          controller: dashboardController,
          controllerAs: "vm"
        }
      }

      dashboardController.$inject = [
        '$log',
        '$state'
      ];

      function dashboardController($log, $state) {
        var vm = this;

      }

}());

(function() {
  'use strict';
    angular.module('panic')
      .directive('lectureStudent', lectureDirective);

      function lectureDirective (){
        return {
          restrict: "E",
          scope: {},
          templateUrl: "partials/lecture.student.html",
          controller: lectureController,
          controllerAs: "vm"
        }
      }

      lectureController.$inject = [
        '$log',
        '$state'
      ];

      function lectureController($log, $state) {
        var vm = this;

      }

}());

(function() {
  'use strict';

    angular.module('panic')
      .directive('lectureTeacher', lectureTeacherDirective);

      function lectureTeacherDirective () {
        return {
          restrict: "E",
          scope: {},
          templateUrl: "partials/lecture.teacher.html",
          controller: lectureTeacherController,
          controllerAs: "vm"
        }
      }

      lectureTeacherController.$inject = [
        '$log',
        '$state'
      ];

      function lectureTeacherController($log, $state) {
        var vm = this;

      }

}());

(function() {
  'use strict';

  angular.module('panic')
  .factory('AuthInterceptorService', factory)

    factory.$inject = ['$window', '$injector'];

    function factory($window, $injector) {
    return {
     'request': function(req) {
       console.log('sending token');
        var token = localStorage.getItem('token');
        if (token) req.headers.authentication = token;
        return req;
      },

      'responseError': function(response) {
        console.log(response);
        if(response.status === 401) {
          $window.localStorage.clear();
          $injector.get('$state').go('landing');
        }
        return response;
        }
      };
    }

}());

(function() {
  'use strict';

  angular.module('panic')
  .directive('areaChart', directive)

  function directive () {
    return {
      scope: {},
      template: '<div google-chart chart="areaChart"></div>',
      controller: controller,
    }

    function controller ($scope, $rootScope, ChartFactory) {
      var i = 0;
      var lectureId = ChartFactory.lectureId
      $scope.className = 'class'

      $rootScope.$on(lectureId, function (event, data) {
        var total = data.d + data.n + data.g;
        var d = data.d/total * 100;
        var n = data.n/total * 100;
        var g = data.g/total * 100;
        areaChart.data.rows.push({c: [{v: data.time + 'min' }, {v: d}, {v: n}, {v: g}] })
      })

      var areaChart = {};
      areaChart.type = "AreaChart";
      areaChart.displayed = false;
      areaChart.data = {};
      areaChart.data.rows = []

      areaChart.data.rows.push({c: [{v: "0min"},{v: 0},{v: 100},{v: 0} ] })

      areaChart.data.cols = [
          {id: "month",label: "Month",type: "string"},
          {id: "DaFuq",label: "DaFuq",type: "number"},
          {id: "NoVote",label: "NoVote",type: "number"},
          {id: "GotIt",label: "GotIt",type: "number"},
        ];
      areaChart.options = {
        "title": $scope.className,
        "isStacked": "true",
        "fill": 20,
        "displayExactValues": true,
        "vAxis": {
          "title": "Percent class",
          "gridlines": {
            "count": 5
          }
        },
        "hAxis": {
          "title": "Time",
          "scaleType": 'log'

        }
      };
      $scope.areaChart = areaChart;

    }
  }


}());

(function() {
  'use strict';

  angular.module('panic')
  .factory('ChartFactory', factory)

  factory.$inject = ['$http', '$rootScope',  '$location']

  function factory ($http, $rootScope, $location) {
    // $rootScope.$on( "$stateChangeSuccess", function(event, next, current) {
    //   console.log($route.current.params);
    // })

    var service = {
      lectureId: 'dogs'
    }
    return service

  }


}());

(function() {
  'use strict';

  angular.module('panic')
  .directive('pieChart', directive)

  function directive () {
    return {
      scope: {},
      template: '<button ng-click="sock()">sock</button><div google-chart chart="pieChart" id="pieChart"></div>',
      controller: controller,
    }
    function controller ($scope, $rootScope, ChartFactory) {
      var socket = io.connect('http://localhost:3000/');
      var pieChart = {};
      var lectureId = ChartFactory.lectureId;

      socket.emit('set', lectureId)

      $scope.sock = function () {
        socket.emit('chart', lectureId)
      }

      socket.on(lectureId, function (data) {
        if (!(data === null)) {
          $scope.vote[0]= { 'c': [ { 'v': 'dafuq' }, {'v' : data.d} ] }
          $scope.vote[1] = { 'c': [ { 'v': 'novote'}, {'v' : data.n} ] }
          $scope.vote[2] = { 'c': [ { 'v':  'gotit'}, {'v' : data.g } ] }
          $rootScope.$emit(lectureId, data)
          $scope.$apply()
        }
      })

      $scope.$on('$destroy', function (event) {
        socket.removeAllListeners();
      });

      pieChart.type = 'PieChart';
      pieChart.displayed = false;
      pieChart.data = {}
      $scope.vote = [];
      $scope.vote[0]= { 'c': [ { 'v': 'dafuq' }, {'v' : 0} ] }
      $scope.vote[1] = { 'c': [ { 'v': 'novote'}, {'v' : 100} ] }
      $scope.vote[2] = { 'c': [ { 'v':  'gotit'}, {'v' : 0 } ] }
      pieChart.data.rows = $scope.vote

      pieChart.data.cols = [
        { "id": "month", "label": "Month", "type": "string" },
        { "id": "laptop-id", "label": "Laptop", "type": "number" },
        { "id": "desktop-id", "label": "Desktop", "type": "number" },
        { "id": "server-id", "label": "Server", "type": "number" },
        { "id": "cost-id", "label": "Shipping", "type": "number" }
      ];

        pieChart.formatters = {}
        pieChart.options = {
          "isStacked": "true",
          "fill": 20,
          "displayExactValues": true,
          },



        $scope.pieChart = pieChart;
    }
  }


}());
